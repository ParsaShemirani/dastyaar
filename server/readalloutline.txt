│ > Please take a look at server/read_filebase and                             │
│   server/filebase_schema.txt. Curretnly, the get all via id function only    │
│   gets the info from the files table, which it is doing well. I want to      │
│   extent it so after it gets that dictionary, it searches for all groupings  │
│   associated with the file and adds a key value pair 'grouping_ids' =        │
│   [...] for each grouping it is associated with, same for 'location_ids'     │
│   and 'fdescription_ids'. And then it adds key value pairs for               │
│   'grouping_names', 'grouping_types', 'location_paths', 'fdescriptions',     │
╰────────────────────────────────────────────────────────────────────────────

Please take a look at the server/read_filebase.py and server/filebase_schema.txt files.
Currently, the get_all_via_id function only gets the info from the files table,
which it is doing well. But I want to extend it so that after it gets that
dictionary, it adds other associated data to it from the other tables,
and appends those as key value pairs to the dictionary.
I will list out the key value pairs that will come as a result,
and those which are not found for the file should be added as None.

"id": INTEGER,
"name": TEXT,
"ts": TEXT,
"ingested_ts": TEXT,
"version_number": INTEGER,
"extension": TEXT,
"size": INTEGER,
"hash": BINARY

To Append:
"groupings", an array of dictionaries. For each grouping asscoiated with the file,
a dictionary is made with the grouping id, name and type.
Such as :
"groupings": [{"id": 45, "name": "Hiking during lake tahoe trip", "type": "collection"}. {"id": 959, "name": None, "type": "proxy"}]

Next item is "fdescription" which is a single dictionary, contains "id" and "description"

last item is "locations" which is an array of dictionaries, contains "id", "name" and "path" for each location associated
with the file.

Please develop the function get_all_via_id to be like this and return that final dictionary that has all those key value pairs.